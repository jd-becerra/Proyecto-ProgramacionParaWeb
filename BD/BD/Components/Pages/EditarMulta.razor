@page "/multas/editar/{id}"
@rendermode InteractiveServer
@using BD.Modelos.Repositorio
@using BD.Modelos
@inject NavigationManager Navegador
@inject IRepositorio Repositorio

<PageTitle>Editar Multa</PageTitle>
<h3>Ingrese los nuevos datos de la multa</h3>


@if (multa == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <EditForm Model="@multa" OnValidSubmit="GuardarMulta">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="FechaCreacion">Fecha Inicial</label>
            <InputDate id="FechaCreacion" class="form-control" @bind-Value="multa.FechaCreacion" />
            <ValidationMessage For="@(() => multa.FechaCreacion)" />
        </div>

        <div class="form-group">
            <label for="FechaPago">Fecha de Pago</label>
            <InputDate id="FechaPago" class="form-control" @bind-Value="multa.FechaPago" />
            <ValidationMessage For="@(() => multa.FechaPago)" />
        </div>

        <div class="form-group">
            <label for="Monto">Monto</label>
            <InputNumber id="Monto" class="form-control" @bind-Value="multa.Monto" />
            <ValidationMessage For="@(() => multa.Monto)" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar</button>
    </EditForm>
}
@code {
    private EditContext? _editContext;

    [Parameter]
    public string? id { get; set; }

    private Multa multa = new Multa();

    protected override async Task OnInitializedAsync()
    {
        multa = await Repositorio.GetMulta(int.Parse(id));
        _editContext = new EditContext(multa);
    }

    private async void GuardarMulta()
    {
        if (!_editContext.Validate()) return;

        await Repositorio.UpdateMulta(multa);
        Navegador.NavigateTo($"/prestamos/multas/{multa.PrestamoId}");
    }
}