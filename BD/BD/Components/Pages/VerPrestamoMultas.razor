@page "/prestamos/multas/{id}"
@rendermode InteractiveServer
@using BD.Modelos.Repositorio
@using BD.Modelos

@inject NavigationManager Navegador
@inject IRepositorio Repositorio

<PageTitle>Préstamos</PageTitle>

<h1>Lista de multas correspondientes al préstamo con id: @id</h1>

<button class="btn btn-success" @onclick="()=>NuevaMulta(int.Parse(id))">Registrar nueva multa</button> <a class="btn btn-primary" href="prestamos">Regresar a la lista de préstamos</a>

@if (_multas != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Fecha inicial</th>
                <th>Fecha límite</th>
                <th>Monto</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var multa in _multas)
            {
                <tr>
                    <td>@multa.Id</td>
                    <td>@multa.FechaCreacion</td>
                    <td>@multa.FechaPago</td>
                    <td>@multa.Monto</td>
                    <td>
                        @if (multa.Completado)
                        {
                            <p>Pagado</p>
                        }
                        else
                        {
                            <p>No pagado</p>
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>EditarMulta(multa.Id)">Editar</button>
                        <button class="btn btn-danger" @onclick="()=>EliminarMulta(multa)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>No hay multas correspondientes a este préstamo</em></p>
}

@code {
    private ICollection<Multa>? _multas;

    [Parameter]
    public string? id { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Prestamo p = await Repositorio.GetPrestamo(int.Parse(id));
        _multas = p.Multas;
    }
    private async void EliminarMulta(Multa multa)
    {
        await Repositorio.DeleteMulta(multa.Id);
        _multas!.Remove(multa);
        StateHasChanged();
    }

    private void EditarMulta(int id)
    {
        Navegador.NavigateTo($"multas/editar/{id}");
    }

    private void NuevaMulta(int id)
    {
        Navegador.NavigateTo($"multas/nuevo/{id}");
    }
}